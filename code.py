# requirements.txt content:
# fastapi==0.111.0
# uvicorn[standard]==0.30.1
# pydantic==2.7.4

from fastapi import FastAPI, HTTPException, Depends, Query
from pydantic import BaseModel, Field
from typing import List, Dict, Optional

# --- 1. FastAPI Application Initialization ---
# Create an instance of the FastAPI application.
app = FastAPI(
    title="Supplier API",
    description="A boilerplate backend for managing supplier information. Now with filtering!",
    version="0.1.1", # Updated version to reflect changes
)

# --- 2. Data Models (using Pydantic) ---

class ContactPerson(BaseModel):
    """
    Represents a contact person for a supplier.
    """
    name: str = Field(..., example="Jane Doe", description="Full name of the contact person.")
    email: str = Field(..., example="jane.doe@example.com", description="Email address of the contact person.")
    phone: Optional[str] = Field(None, example="+1-555-123-4567", description="Optional phone number.")

class SupplierBase(BaseModel):
    """
    Base model for creating or updating a supplier.
    Contains common fields.
    """
    name: str = Field(..., min_length=3, max_length=100, example="Acme Supplies Inc.", description="Name of the supplier.")
    industry: str = Field(..., example="Manufacturing", description="Industry the supplier operates in.")
    contact_person: ContactPerson
    is_active: bool = Field(True, description="Whether the supplier is currently active.")

class SupplierCreate(SupplierBase):
    """
    Model for creating a new supplier.
    """
    pass

class Supplier(SupplierBase):
    """
    Full supplier model, including fields generated by the system (like ID).
    """
    id: int = Field(..., example=1, description="Unique identifier for the supplier.")

    class Config:
        from_attributes = True
        json_schema_extra = {
            "example": {
                "id": 1,
                "name": "Global Tech Solutions",
                "industry": "IT Services",
                "contact_person": {
                    "name": "John Smith",
                    "email": "john.smith@globaltech.com",
                    "phone": "555-987-6543"
                },
                "is_active": True
            }
        }

# --- 3. In-memory "Database" (for demonstration purposes) ---
# Seed with some initial data for testing the filtering
fake_db: Dict[int, Supplier] = {}
next_id = 1

# Add some sample data
def add_sample_suppliers():
    global next_id
    suppliers_data = [
        {"name": "Acme Manufacturing", "industry": "Manufacturing", "contact_person": {"name": "Alice Brown", "email": "alice@acme.com"}, "is_active": True},
        {"name": "Beta Software Solutions", "industry": "Software", "contact_person": {"name": "Bob Green", "email": "bob@beta.com"}, "is_active": True},
        {"name": "Gamma Logistics", "industry": "Logistics", "contact_person": {"name": "Charlie White", "email": "charlie@gamma.com"}, "is_active": False},
        {"name": "Delta Components", "industry": "Manufacturing", "contact_person": {"name": "Diana Prince", "email": "diana@delta.com"}, "is_active": True},
        {"name": "Epsilon Services", "industry": "IT Services", "contact_person": {"name": "Eve Adams", "email": "eve@epsilon.com"}, "is_active": False},
    ]
    for data in suppliers_data:
        supplier_obj = Supplier(id=next_id, **data)
        fake_db[next_id] = supplier_obj
        next_id += 1

add_sample_suppliers()


# --- 4. Dependency Injection ---
def get_db():
    """
    Dependency that yields the fake database.
    """
    try:
        yield fake_db
    finally:
        pass

# --- 5. API Endpoints ---

@app.get("/")
async def read_root():
    """
    Root endpoint for a simple health check or welcome message.
    """
    return {"message": "Welcome to the Supplier API! Now with filtering capabilities."}

@app.get("/suppliers/", response_model=List[Supplier])
async def get_all_suppliers(
    industry: Optional[str] = Query(None, description="Filter suppliers by industry."),
    is_active: Optional[bool] = Query(None, description="Filter suppliers by active status."),
    db: Dict[int, Supplier] = Depends(get_db)
):
    """
    Retrieve a list of all registered suppliers, with optional filtering.
    You can filter by 'industry' and/or 'is_active' status.
    """
    filtered_suppliers = list(db.values())

    if industry:
        # Case-insensitive and partial match for industry
        industry_lower = industry.lower()
        filtered_suppliers = [
            s for s in filtered_suppliers if industry_lower in s.industry.lower()
        ]

    if is_active is not None: # Check explicitly for True/False
        filtered_suppliers = [
            s for s in filtered_suppliers if s.is_active == is_active
        ]

    return filtered_suppliers

@app.get("/suppliers/{supplier_id}", response_model=Supplier)
async def get_supplier_by_id(supplier_id: int, db: Dict[int, Supplier] = Depends(get_db)):
    """
    Retrieve a single supplier by its unique ID.
    Raises a 404 error if the supplier is not found.
    """
    supplier = db.get(supplier_id)
    if supplier is None:
        raise HTTPException(status_code=404, detail="Supplier not found")
    return supplier

@app.post("/suppliers/", response_model=Supplier, status_code=201)
async def create_supplier(supplier: SupplierCreate, db: Dict[int, Supplier] = Depends(get_db)):
    """
    Create a new supplier.
    The supplier data is provided in the request body.
    """
    global next_id
    new_supplier = Supplier(id=next_id, **supplier.model_dump())
    db[next_id] = new_supplier
    next_id += 1
    return new_supplier

@app.put("/suppliers/{supplier_id}", response_model=Supplier)
async def update_supplier(
    supplier_id: int, updated_supplier: SupplierCreate, db: Dict[int, Supplier] = Depends(get_db)
):
    """
    Update an existing supplier's information by ID.
    Raises a 404 error if the supplier is not found.
    """
    if supplier_id not in db:
        raise HTTPException(status_code=404, detail="Supplier not found")

    existing_supplier = db[supplier_id]
    updated_data = updated_supplier.model_dump(exclude_unset=True)
    for key, value in updated_data.items():
        setattr(existing_supplier, key, value)
        
    db[supplier_id] = existing_supplier
    return existing_supplier

@app.delete("/suppliers/{supplier_id}", status_code=204)
async def delete_supplier(supplier_id: int, db: Dict[int, Supplier] = Depends(get_db)):
    """
    Delete a supplier by its ID.
    Returns 204 No Content on successful deletion.
    Raises a 404 error if the supplier is not found.
    """
    if supplier_id not in db:
        raise HTTPException(status_code=404, detail="Supplier not found")
    del db[supplier_id]
    return {"message": "Supplier deleted successfully"}

# --- 6. How to run the application (using Uvicorn) ---
# To run this API, save the code as `main.py` (or any other name).
# Ensure you have FastAPI and Uvicorn installed:
# pip install "fastapi[all]" uvicorn

# Then run from your terminal in the same directory:
# uvicorn main:app --reload

# You can then access the API at http://127.0.0.1:8000
# And the interactive documentation (Swagger UI) at http://127.0.0.1:8000/docs
